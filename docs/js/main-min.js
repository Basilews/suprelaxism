const pictureList=[{id:"id0",author:"Kazimir Malevich",date:"1915",description:"Red square and black square",figures:[{speed:10},{speed:20,rotate:-12}]},{id:"id1",author:"Nadezhda Udaltsova",date:"1916",description:"Unnamed",figures:[{speed:10},{speed:25},{speed:25},{speed:15},{speed:10}]}],gallery=document.getElementsByClassName("gallery")[0];gallery.addEventListener("click",e=>{if("previewContainer"===e.target.parentElement.className){const t=parseInt(e.target.parentElement.id,10),s=document.getElementsByClassName("pictureContainer")[0],{offsetTop:i}=s;new Picture(pictureList[t]),window.scrollTo(0,i)}});class Picture{constructor(e){this.canvas=document.getElementsByClassName("pictures")[0],this.figures=new Array(e.figures.length),this.x=0,this.y=0,this.drawPicture(e),window.addEventListener("mousemove",e=>{requestAnimationFrame(()=>this.moveObjects(e))},{passive:!0}),window.DeviceMotionEvent&&window.addEventListener("devicemotion",e=>{const t=e.rotationRate.beta.toPrecision(2),s=e.rotationRate.alpha.toPrecision(2);this.x+=parseFloat(t),this.y+=parseFloat(s);const i=this.x,a=this.y;requestAnimationFrame(()=>this.moveObjects({clientX:i,clientY:a,isGyro:!0}))},{passive:!0})}drawPicture(e){this.canvas.innerHTML=`\n      <li class="pictureContainer">\n        <div class="description">\n          <p class="name">«${e.description}»</p>\n          <p class="author">${e.author}, ${e.date}</p>\n        </div>\n        <div id="${e.id}" class="picture">\n          ${e.figures.map((e,t)=>`<div\n              class="fig${t} figure"\n              data-speed="${e.speed}"\n              data-rotate="${e.rotate?e.rotate:""}"></div>`)}\n        </div>\n      </li>\n    `,e.figures.forEach((e,t)=>{const s=document.getElementsByClassName(`fig${t}`)[0];this.figures[t]={el:s,speed:s.dataset.speed,rotate:s.dataset.rotate}})}findCoordinates(e,t,s){return{xPos:t.isGyro?-t.clientX*e.speed/s:(this.x-t.clientX)*e.speed/s,yPos:t.isGyro?-t.clientY*e.speed/s:(this.y-t.clientY)*e.speed/s}}moveObjects(e){const t=e.isGyro?700:300;if(!e.isGyro&&!this.x&&!this.y)return this.x=e.clientX,void(this.y=e.clientY);this.figures.forEach(s=>{const{xPos:i,yPos:a}=this.findCoordinates(s,e,t);s.el.style.transform=`translate3d(${i}px, ${a}px, 0) rotate(${s.rotate||0}deg)`})}}new Picture(pictureList[0]);